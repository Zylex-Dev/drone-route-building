// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ –ö–æ–ª–æ–º–Ω–µ
const kolomnaCoords = [55.095276, 38.765574];

// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å–ª–æ—è: —Å–≤–µ—Ç–ª—ã–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–º–Ω—ã–π (Esri World Dark Gray Canvas)
const lightTileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  maxZoom: 19,
  attribution: '&copy; OpenStreetMap contributors'
});

const darkTileLayer = L.tileLayer(
  'https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Dark_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
  maxZoom: 16,
  attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
}
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å —Å–≤–µ—Ç–ª—ã–º —Å–ª–æ–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const map = L.map('map', { layers: [lightTileLayer] }).setView(kolomnaCoords, 13);

// –ú–∞—Ä–∫–µ—Ä —Ü–µ–Ω—Ç—Ä–∞ –ö–æ–ª–æ–º–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
L.marker(kolomnaCoords).addTo(map)
  .bindPopup('–ö–æ–ª–æ–º–Ω–∞')
  .openPopup();

// –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
const drawnItems = new L.FeatureGroup();
map.addLayer(drawnItems);

// –°–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
let routeLayer = null;
// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞
let startMarker = null;
let endMarker = null;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
const drawControl = new L.Control.Draw({
  edit: {
    featureGroup: drawnItems,
    remove: true
  },
  draw: {
    polygon: {
      allowIntersection: false,
      showArea: true,
      drawError: {
        color: '#e1e100',
        message: '<strong>–û—à–∏–±–∫–∞:</strong> –ü–æ–ª–∏–≥–æ–Ω –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å–∞–º —Å —Å–æ–±–æ–π!'
      },
      shapeOptions: {
        color: '#5a2a83'
      }
    },
    rectangle: { shapeOptions: { color: '#5a2a83' } },
    polyline: false,
    circle: false,
    marker: false,
    circlemarker: false
  }
});
map.addControl(drawControl);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –º–∞—Ä–∫–µ—Ä–æ–≤
// –∞ —Ç–∞–∫–∂–µ —Å–±—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—ä–µ–º–∫–∏
function clearAllObjects() {
  drawnItems.clearLayers();

  if (routeLayer) {
    map.removeLayer(routeLayer);
    routeLayer = null;
  }
  if (startMarker) {
    map.removeLayer(startMarker);
    startMarker = null;
  }
  if (endMarker) {
    map.removeLayer(endMarker);
    endMarker = null;
  }

  // –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
  document.getElementById('altitudeInfo').textContent = '–í—ã—Å–æ—Ç–∞ –ø–æ–ª—ë—Ç–∞: - –º';
  document.getElementById('fovInfo').textContent = '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª –æ–±–∑–æ—Ä–∞ (rad): -';
  document.getElementById('groundWidthInfo').textContent = '–ó–µ–º–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–¥—Ä–∞: - –º';
  document.getElementById('spacingInfo').textContent = '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ –º–µ–∂–¥—É –ø–æ–ª–æ—Å–∞–º–∏: - –º';
}

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫ –∫–Ω–æ–ø–∫–µ "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë"
document.getElementById('clearAll').addEventListener('click', clearAllObjects);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
function validateInputs(flightAltitude, desiredOverlap) {
  if (isNaN(flightAltitude) || flightAltitude < 10 || flightAltitude > 500) {
    alert('–í—ã—Å–æ—Ç–∞ –ø–æ–ª—ë—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 10 –¥–æ 500 –º–µ—Ç—Ä–æ–≤.');
    return false;
  }
  if (isNaN(desiredOverlap) || desiredOverlap < 0 || desiredOverlap >= 100) {
    alert('–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 99%.');
    return false;
  }
  return true;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
map.on(L.Draw.Event.CREATED, function (event) {
  const layer = event.layer;
  drawnItems.addLayer(layer);

  // –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–µ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏ –º–∞—Ä–∫–µ—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (routeLayer) {
    map.removeLayer(routeLayer);
    routeLayer = null;
  }
  if (startMarker) {
    map.removeLayer(startMarker);
    startMarker = null;
  }
  if (endMarker) {
    map.removeLayer(endMarker);
    endMarker = null;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
  const territoryLatLngs = layer.getLatLngs()[0];
  const territoryPoints = territoryLatLngs.map(latlng => ({
    lat: latlng.lat,
    lng: latlng.lng
  }));

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const shootingType = '–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è —Å—ä–µ–º–∫–∞';
  const droneModel = 'DJI Matrice 30T';
  const flightAltitude = Number(document.getElementById('flightAltitude').value);
  const desiredOverlapInput = Number(document.getElementById('desiredOverlap').value);

  if (!validateInputs(flightAltitude, desiredOverlapInput)) {
    return;
  }
  const desiredOverlap = desiredOverlapInput / 100;

  // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  fetch('http://localhost:3000/api/calculate-route', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      territory: territoryPoints,
      shootingType,
      droneModel,
      flightAltitude,
      desiredOverlap
    })
  })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
        routeLayer = L.geoJSON(data.route, {
          style: () => ({ color: '#007bff', weight: 4 })
        }).addTo(map);
        map.fitBounds(routeLayer.getBounds());

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏
        document.getElementById('altitudeInfo').textContent = '–í—ã—Å–æ—Ç–∞ –ø–æ–ª—ë—Ç–∞: ' + flightAltitude + ' –º';
        const horizontalFOV = (2 * Math.atan(7.6 / (2 * 4.5))).toFixed(4);
        document.getElementById('fovInfo').textContent = '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª –æ–±–∑–æ—Ä–∞ (rad): ' + horizontalFOV;
        const groundWidth = (2 * flightAltitude * Math.tan((2 * Math.atan(7.6 / (2 * 4.5))) / 2)).toFixed(2);
        document.getElementById('groundWidthInfo').textContent = '–ó–µ–º–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–¥—Ä–∞: ' + groundWidth + ' –º';
        document.getElementById('spacingInfo').textContent = '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ –º–µ–∂–¥—É –ø–æ–ª–æ—Å–∞–º–∏: ' + data.route.properties.effectiveSpacingMeters + ' –º';

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        const coords = data.route.geometry.coordinates;
        if (coords && coords.length > 0) {
          const startPoint = [coords[0][1], coords[0][0]];
          const endPoint = [coords[coords.length - 1][1], coords[coords.length - 1][0]];
          startMarker = L.circleMarker(startPoint, {
            radius: 8,
            color: '#28a745',
            fillColor: '#28a745',
            fillOpacity: 1
          }).addTo(map).bindPopup("–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞");
          endMarker = L.circleMarker(endPoint, {
            radius: 8,
            color: '#dc3545',
            fillColor: '#dc3545',
            fillOpacity: 1
          }).addTo(map).bindPopup("–ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞");
        }
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∞: ' + data.message);
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error);
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã, –≤–∫–ª—é—á–∞—è —Å–º–µ–Ω—É —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã
const themeToggleButton = document.getElementById('themeToggle');

themeToggleButton.addEventListener('click', () => {
  document.body.classList.toggle('dark-theme');

  if (document.body.classList.contains('dark-theme')) {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ —Å–æ–ª–Ω—Ü–∞ (–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–≤–µ—Ç–ª—É—é)
    themeToggleButton.innerHTML = '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Ç–µ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    map.removeLayer(lightTileLayer);
    darkTileLayer.addTo(map);
  } else {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –ª—É–Ω—ã (–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ç–µ–º–Ω—É—é)
    themeToggleButton.innerHTML = 'üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞';
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å–≤–µ—Ç–ª—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    map.removeLayer(darkTileLayer);
    lightTileLayer.addTo(map);
  }
});
